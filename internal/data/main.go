package main

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
type Expense struct {
	Category string
	Andrey   int
	Yulia    int
}

func main() {
	// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
	dir := "/Users/ankul/obsidian/_notes/daily"

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–∏—Ö —Å—É–º–º –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	totalAndrey := 0
	totalYulia := 0
	categoryExpenses := make(map[string][2]int) // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ê–Ω–¥—Ä–µ—è –∏ –Æ–ª–∏

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –µ–≥–æ –∏–º—è –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ".md" –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–µ–∫–∞–±—Ä—é
		if !info.IsDir() && strings.HasSuffix(info.Name(), ".md") && strings.HasPrefix(info.Name(), "2024-12") {
			file, err := os.Open(path)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", err)
				return nil
			}
			defer file.Close()

			// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
			inExpensesSection := false

			// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
			scanner := bufio.NewScanner(file)
			for scanner.Scan() {
				line := scanner.Text()

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–µ–∫—Ü–∏–∏ "Expenses"
				if strings.Contains(line, "## üßæ Expenses") {
					inExpensesSection = true
					continue
				}
				if strings.Contains(line, "## üßæ Income") {
					inExpensesSection = false
					continue
				}

				// –ï—Å–ª–∏ –º—ã –Ω–µ –≤ —Å–µ–∫—Ü–∏–∏ "Expenses", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏
				if !inExpensesSection {
					continue
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü—ã
				if strings.HasPrefix(line, "|") {
					columns := strings.Split(line, "|")
					if len(columns) >= 3 {
						category := strings.TrimSpace(columns[1])
						andreyAmount, _ := strconv.Atoi(strings.TrimSpace(columns[2]))
						yuliaAmount, _ := strconv.Atoi(strings.TrimSpace(columns[3]))

						// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
						if category == "Category" || strings.Contains(category, "-") {
							continue
						}

						// –°—É–º–º–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
						categoryExpenses[category] = [2]int{
							categoryExpenses[category][0] + andreyAmount,
							categoryExpenses[category][1] + yuliaAmount,
						}

						// –°—É–º–º–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
						totalAndrey += andreyAmount
						totalYulia += yuliaAmount
					}
				}
			}
			if err := scanner.Err(); err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
			}
		}
		return nil
	})

	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err)
		return
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	fmt.Printf("–ê–Ω–¥—Ä–µ–π –ø–æ—Ç—Ä–∞—Ç–∏–ª: %d -> ", totalAndrey)
	for category, amounts := range categoryExpenses {
		if amounts[0] > 0 {
			fmt.Printf("%s: %d, ", category, amounts[0])
		}
	}
	fmt.Println()

	fmt.Printf("–Æ–ª—è –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞: %d -> ", totalYulia)
	for category, amounts := range categoryExpenses {
		if amounts[1] > 0 {
			fmt.Printf("%s: %d, ", category, amounts[1])
		}
	}
	fmt.Println()

	// –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—É–º–º—É
	fmt.Printf("\n–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: %d\n", totalAndrey+totalYulia)
}
